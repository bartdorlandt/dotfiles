
" :so % to refresh .vimrc after making changes
" :VundleInstall to install new stuff
" :VundleUpdate to update to latest versions
" :VundleClean to remove packages no longer used.
"

if &compatible
  set nocompatible
end

""""""""""""""""""""""""""""""""""""
""" Vundle settings and plugins  """
""""""""""""""""""""""""""""""""""""

" Vundle settings
" set the runtime path to include Vundle and initialize
" first setup Vundle:
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

Plugin 'gmarik/Vundle.vim' " Vundle to manage plugin Vundle

" Syntax checking / highlighting
Plugin 'vim-syntastic/syntastic' " Syntax highlighting
" Pymode, big plugin for Python
" Bundle 'klen/python-mode'
" Bundle 'davidhalter/jedi-vim' " Jedi for python, especially rename is good!
"Supertab, to make tab work everywhere
" Bundle 'ervandew/supertab'
Plugin 'ervandew/supertab'
Plugin 'roxma/vim-paste-easy' " Vim paste easy
"Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
"Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'vim-airline/vim-airline' " Status line + buffer
" Plugin 'vim-airline/vim-airline-themes'
Plugin 'bling/vim-bufferline'
" Plugin 'godlygeek/tabular' " Aliging output
Plugin 'plasticboy/vim-markdown' " Markdown for Vim
Plugin 'Rykka/riv.vim' " reStructuredText for Vim
Plugin 'tpope/vim-repeat' " Vim repeat for plugins, to be able to use . with them.
Plugin 'christoomey/vim-tmux-navigator' " Tmux

" All of your Plugins must be added before the following line
call vundle#end()            " required


"""""""""""""""""""""""""""""""""""
""" Plugin settings and tweaks  """
"""""""""""""""""""""""""""""""""""

""""""""""""""""""
" Surround shortcuts
""""""""""""""""""
" https://github.com/tpope/vim-surround
"  Old text                  Command     New text ~
"  "Hello *world!"           ds"         Hello world!
"  [123+4*56]/2              cs])        (123+456)/2
"  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
"  if *x>3 {                 ysW(        if ( x>3 ) {
"  my $str = *whee!;         vllllS'     my $str = 'whee!';
" with visual, use S" to surround with ".

" """"""""""""""""""
" " Python settings
" """"""""""""""""""
" " Python-mode
" " Activate rope
" " Keys:
" " K             Show python docs
" " <Ctrl-Space>  Rope autocomplete
" " <Ctrl-c>g     Rope goto definition
" " <Ctrl-c>d     Rope show documentation
" " <Ctrl-c>f     Rope find occurrences
" " <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" " [[            Jump on previous class or function (normal, visual, operator modes)
" " ]]            Jump on next class or function (normal, visual, operator modes)
" " [M            Jump on previous class or method (normal, visual, operator modes)
" " ]M            Jump on next class or method (normal, visual, operator modes)
" " Defaults are commented.
" " let g:pymode = 1
" let g:pymode_python = 'python3'
" let g:pymode_trim_whitespaces = 1
" let g:pymode_options = 0
" let g:pymode_options_max_line_length = 79
" let g:pymode_options_colorcolumn = 0
" let g:pymode_indent = 1
" let g:pymode_folding = 1
" let g:pymode_run = 0
" let g:pymode_breakpoint = 1
" let g:pymode_breakpoint_bind = '<leader>b'
" " Documentation
" let g:pymode_doc = 0
" let g:pymode_doc_key = 'K'
" " " Linting
" let g:pymode_lint = 1
" " Auto check on save
" let g:pymode_lint_write = 1
" " let g:pymode_rope = 1
" " added additionally.
" let g:pymode_rope_completion = 1
" let g:pymode_rope_complete_on_dot = 0
" let g:pymode_rope_completion_bind = '<C-Space>'
" let g:pymode_rope_autoimport_modules = ['os', 're', 'argparse', 'datetime']
" " Rename under cursor
" let g:pymode_rope_rename_bind = '<Leader>rr'
" " let g:pymode_rope_rename_bind = '<C-c>rr'
" " let g:pymode_rope_rename_bind = '<leader>r'
" " syntax highlighting
" let g:pymode_syntax = 1
" let g:pymode_syntax_all = 1
" let g:pymode_syntax_print_as_function = 1
" " let g:pymode_syntax_indent_errors = g:pymode_syntax_all
" " let g:pymode_syntax_space_errors = g:pymode_syntax_all
" " let g:pymode_syntax_highlight_self = g:pymode_syntax_all
" let g:pymode_lint_options_mccabe = { 'complexity': 15 }


" " If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
" autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
" autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" """ jedi-vim """
" " https://github.com/davidhalter/jedi-vim
" let g:jedi#auto_vim_configuration = 0
" let g:jedi#popup_on_dot = 0
" let g:jedi#completions_enabled = 1
" let g:jedi#smart_auto_mappings = 0
" let g:jedi#goto_command = "<leader>d"
" let g:jedi#goto_assignments_command = "<leader>g"
" " let g:jedi#goto_definitions_command = "<leader>d"
" let g:jedi#documentation_command = " K"
" let g:jedi#usages_command = "<leader>n"
" let g:jedi#completions_command = "<C-Space>"
" let g:jedi#rename_command = "<leader>r"
" " Additional settings

"""""""""""""""""""""""""""""""""
" Syntastic settings
"""""""""""""""""""""""""""""""""
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 5

" let g:syntastic_python_checkers = ['flake8', 'pep8', 'pylint', 'python']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args='--ignore=W391'
let g:syntastic_python_flake8_args='--ignore=E722'
let g:syntastic_python_flake8_args = "--max-line-length=96"

" Able to use :q in the location list to close it
function! QuitOrLclose()
	if &buftype == 'quickfix'
		lclose
		lclose
	else
		quit
	endif
endfunction

cabbrev q call QuitOrLclose()

"""""""""""""""""""""""""""""""""
" airline settings
"""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1

"""""""""""""""""""""""""""""""""
" Vim Markdown settings
"""""""""""""""""""""""""""""""""
" https://github.com/plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1
set conceallevel=1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_autowrite = 1

"""""""""""""""""""""""""""""""""
" NERDtree settings
"""""""""""""""""""""""""""""""""
" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=1
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" Toggle NERDTree
" nmap <silent><leader>f :NERDTreeToggle<cr>
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent><leader>y :NERDTreeFind<cr>

"""""""""""""""""""""""""""""""""
" CtrlP settings
"""""""""""""""""""""""""""""""""
" map fuzzyfinder (CtrlP) plugin
" nmap <silent> <leader>t :CtrlP<cr>
nmap <silent><Leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" CtrlP ignore patterns
let g:ctrlp_custom_ignore = {
            \ 'dir': '\.git$\|node_modules$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$'
            \ }

" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2


