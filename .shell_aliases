# vim: set filetype=bash:
export PAGER='less'
export BAT_PAGER=''
export EDITOR='vim'
export PYTHONSTARTUP=~/.pythonstartup
export LESS='--chop-long-lines --HILITE-UNREAD --ignore-case --incsearch --jump-target=4 --LONG-PROMPT --no-init --quit-if-one-screen --RAW-CONTROL-CHARS --use-color --window=-4'
export DIRENV_LOG_FORMAT=''

############### Local aliases & commands ################
# list aliases
function _l() {
	if command -v eza >/dev/null 2>&1; then
		eza -F "$@"
	else
		ls -CF --color=auto "$@"
	fi
}
alias l='_l'
alias ll='l -l'
alias lla='ll -aa'
function _llt() {
	if command -v eza >/dev/null 2>&1; then
		lla -s created "$@"
	else
		lla -tr --color "$@"
	fi
}
alias llt='_llt'
alias lr='llt'
alias lsa='lla'
alias la='l -ahF'

alias aptcache='aptitude search'
alias bak='$HOME/scripts/bak.sh'
alias p='ping'
alias pst='ps axjf'
alias psc='ps xawf -eo pid,user,cgroup,args'
alias screen='screen -U'
alias screen-r='screen -r'
alias sudr='sudo -i'
alias sud='sudo su'
alias n='nslookup'
alias dus='du -ks * | sort -n'
alias dud='du -sch .[^.]* * |sort -h'
alias o='less'
[ -x /usr/bin/vim ] && alias vi='vim'

alias curlo='curl -# -C - -O -J -L'
alias CON='screen /dev/ttyUSB0 9600'

# alias sshlog='$HOME/scripts/ssh-logging.sh'
alias sno='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
alias alg='alias | grep'
alias dns='nmcli device show | grep -e DNS -e GENERAL.DEVICE'
alias run='./run'

function yaml2json {
    local FILENAME=$1
    yq $FILENAME -o=json | perl -p -e "s/1$//mg"
}

function json2yaml {
    local FILENAME=$1
    cat $FILENAME | jq -S | yq -P "."
}


############### ip section ###############
alias myipext='curl ifconfig.co'
alias myipext4='curl -4 ifconfig.co'
alias myipext6='curl -6 ifconfig.co'
ip --color > /dev/null 2>&1 && IPCOLOR='--color'
alias ip='ip $IPCOLOR'
alias ipb='ip $IPCOLOR --brief'
alias ip4='ip -4 $IPCOLOR --brief addr | grep -v UNKNOWN'
alias ip6='ip -6 $IPCOLOR --brief addr | grep -v UNKNOWN'

# tools
alias awscli='python3 -m awscli'
alias pycharm='$HOME/scripts/pycharm_alias.sh'
alias pc='$HOME/scripts/pycharm_alias.sh'
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

############### python venv ###############
alias venv='source .venv/bin/activate'
function _CMD() { echo $1; `echo $1`;}
function venvcreate() {
	if [[ -z "$1" ]]
	then
		version=3
	else
		version=$1
	fi
	_CMD "python${version} -m venv .venv $EXTRA";
	_CMD "source .venv/bin/activate";
	_CMD "python3 -m ensurepip --upgrade";
	if [[ ! -e .envrc ]]; then
		echo "layout uv" | tee -a .envrc
		direnv allow
	fi
}
alias venvupgrade='python3 -m venv --upgrade .venv'
function proj() {
	project=$1
	if [[ -z "$2" ]]; then
		version=3
	else
		version=$2
	fi
	mkdir -p $project
	echo "Created path: $project"
	cd $project
	venvcreate $version
}

############### Docker ###############
alias DOCKER='cd /var/lib/docker'
alias Dps='docker ps'
alias Dpshort='docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"'
alias Dpsa='docker ps -a'
alias Dpsl='docker ps -l'
alias Dins='docker inspect'
alias Drm='docker rm -v'
alias Drma='docker rm -v $(docker ps -a -q)'
alias Drml='docker rm -v $(docker ps -l -q)'
alias Drmi='docker rmi'
alias Drmv='docker volume rm'
alias Dimg='docker images'
alias Dimga='docker images -a'
alias Dip='docker ps -q | xargs -n 1 docker inspect --format "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}} {{ .Name }}" | sed "s/ \// /"'
alias Dstart='docker start'
alias Dstop='docker stop'
alias Dstopall='docker stop $(docker ps -aq)'
alias Dprune='docker image prune'
function Dexec() { docker exec -it $1 bash ;}
function Drun() { docker run -it $1 /bin/bash;}
function Drunt() { docker run --rm -it $1 /bin/bash;}

############### VirtualBox ###############
function VBheadless() {
	local HOST=$1
	VBoxManage modifyvm "$HOST" --defaultfrontend headless;
}

############### KVM ###############
alias qls='virsh list --all'
alias qstart='virsh start'
alias qstop='virsh destroy'

### Ansible ####
function galaxyRoleImport() { ansible-galaxy role import --token $(cat ~/.ansible/galaxy_token) bartdorlandt ${PWD##*/}; }


### ssh agent ###
# Location of the SSH environment file
export SSH_ENV="$HOME/.ssh/environment"

# Check if ssh-agent is already running
__ssh_agent_is_started() {
  if [ -f "$SSH_ENV" ] && [ -z "$SSH_AGENT_PID" ]; then
    source "$SSH_ENV" > /dev/null 2>&1
  fi

  if [ -z "$SSH_AGENT_PID" ]; then
    return 1
  fi

  ps -p "$SSH_AGENT_PID" | grep -q "ssh-agent"
  return $?
}

# Start a new ssh-agent and save environment
__ssh_agent_start() {
  ssh-agent -c | sed 's/^echo/#echo/' > "$SSH_ENV"
  chmod 600 "$SSH_ENV"
  source "$SSH_ENV" > /dev/null 2>&1
}

# Main wrapper function
zsh_ssh_agent() {
  if [ -z "$SSH_ENV" ]; then
    export SSH_ENV="$HOME/.ssh/environment"
  fi

  if ! __ssh_agent_is_started; then
    __ssh_agent_start
  fi
}

### Repo ###
function gitupfind() {
	# Start from the current directory
	local current_dir
	current_dir=$(pwd)
	# Loop until we reach the root directory "/"
	while [ "$current_dir" != "/" ]; do
		# Check if the .git directory exists in the current directory
		if [ -f "$current_dir/.git/config" ]; then
			# If found, print the absolute path and exit
			echo "$current_dir"
			return
		fi
		# Move up one directory
		current_dir=$(dirname "$current_dir")
	done
	# If we reached here, .git directory was not found
	echo ""
}

function _gitconfigurl() {
  local GITPATH
  GITPATH=$(gitupfind)

  if [ -z "$GITPATH" ]; then
    echo ""
    return
  fi

  local URLSTR
  URLSTR=$(grep -A1 '\[remote "origin"\]' "$GITPATH/.git/config" | grep "url =")

  local URL
  if [[ "$URLSTR" == *https://* ]]; then
    URL=$(echo "$URLSTR" | cut -d '=' -f2 | tr -d '[:space:]')
  else
    URL="https://$(echo "$URLSTR" | cut -d '@' -f2 | tr ':' '/' | sed -E 's/\.git//')"
  fi

  echo "$URL"
}

function web() {
	local current_dir
	current_dir=$(pwd)

	local SPECIFIED_PATH=$1
	local GITPATH
	GITPATH=$(gitupfind)
	if [ -z $GITPATH ]; then
		echo "No .git directory found"
		return 1
	fi

	local URL=$(_gitconfigurl)

  	if [ -n "$SPECIFIED_PATH" ]; then
    # calculate path
    local FULLPATH="$(echo "$current_dir" | sed -E "s@$GITPATH@@")/$SPECIFIED_PATH"

    local BRANCH=$(git branch --show-current)

    local URLPATH
    if [[ $(_gitconfigurl) == *github* ]]; then
      URLPATH="/blob/$BRANCH/$FULLPATH"
    elif [[ $(_gitconfigurl) == *gitlab* ]]; then
      URLPATH="/-/blob/$BRANCH/$FULLPATH?ref_type=heads"
    else
      echo "Git repository not implemented."
      return 1
    fi

    URL="${URL}${URLPATH}"
  fi

  open "$URL"
}

function webmr() {
	local current_dir
	current_dir=$(pwd)

	local GITPATH=$(gitupfind)

	if [ -z "$GITPATH" ]; then
		echo "No .git directory found"
		return 1
	fi

	local URL=$(_gitconfigurl)
	local BRANCH=$(git branch --show-current)

	if [[ "$BRANCH" == "master" || "$BRANCH" == "main" ]]; then
		echo "Main/Master branch, skipping"
		return
	fi

	local URLPATH
	if [[ $(_gitconfigurl) == *github* ]]; then
		URLPATH="/compare/$BRANCH?expand=1"
	elif [[ $(_gitconfigurl) == *gitlab* ]]; then
		URLPATH="/-/merge_requests/new?merge_request%5Bsource_branch%5D=$BRANCH"
	else
		echo "Git repository not implemented."
		return
	fi

	URL="${URL}${URLPATH}"

	echo "Opening: $URL"
	open "$URL"
}

# yubikey
if [ -e /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"

  if [ -e "$(brew --prefix)/var/run/yubikey-agent.sock" ]; then
    export SSH_AUTH_SOCK="$(brew --prefix)/var/run/yubikey-agent.sock"
  fi

  if [ -d "$(brew --prefix openssh)/bin" ]; then
    zsh_add_path "$(brew --prefix openssh)/bin"
  fi
fi

# Work
function JIRA() { open https://onejira.imperva.com/browse/$1 ;}

